{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dd-dataverse-authenticator \u00b6 Service that authenticates Dataverse users using account credentials Purpose \u00b6 Provide a way for a front-end service (such as dd-sword2 ) to authenticate users against Dataverse user accounts. This service is basically an extension of the Dataverse API. Interfaces \u00b6 The interface is very simple: a POST request with either: basic authentication with the user's username and password, OR an X-Dataverse-key with the user's API token If the user is successfully authenticated a 200 OK response is returned with a message body containing the authenticated user ID in a simple json doc: { \"userId\": \"user001\" } If the credentials were absent or incorrect 401 Unauthorized is returned. If both the basic auth and the API-token are sent a 400 Bad Request is returned and the credentials are not verified. Examples \u00b6 curl -v -u username:password -X POST http://localhost:20340/ curl -v -H 'X-Dataverse-key: 123e4567-e89b-12d3-a456-426614174000' \\ -X POST http://localhost:20340/","title":"Description"},{"location":"#dd-dataverse-authenticator","text":"Service that authenticates Dataverse users using account credentials","title":"dd-dataverse-authenticator"},{"location":"#purpose","text":"Provide a way for a front-end service (such as dd-sword2 ) to authenticate users against Dataverse user accounts. This service is basically an extension of the Dataverse API.","title":"Purpose"},{"location":"#interfaces","text":"The interface is very simple: a POST request with either: basic authentication with the user's username and password, OR an X-Dataverse-key with the user's API token If the user is successfully authenticated a 200 OK response is returned with a message body containing the authenticated user ID in a simple json doc: { \"userId\": \"user001\" } If the credentials were absent or incorrect 401 Unauthorized is returned. If both the basic auth and the API-token are sent a 400 Bad Request is returned and the credentials are not verified.","title":"Interfaces"},{"location":"#examples","text":"curl -v -u username:password -X POST http://localhost:20340/ curl -v -H 'X-Dataverse-key: 123e4567-e89b-12d3-a456-426614174000' \\ -X POST http://localhost:20340/","title":"Examples"},{"location":"config/","text":"Configuration \u00b6 This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-dataverse-authenticator/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here . This needs to have direct read access to the Dataverse database. It is recommended to use a dedicated PostGreSQL user for this with only SELECT permissions on the tables: builtinuser , apitoken and authenticateduser .","title":"Configuration"},{"location":"config/#configuration","text":"This module can be configured by editing the configuration file. This file is installed in /etc/opt/dans.knaw.nl/dd-dataverse-authenticator/config.yml when using the RPM. The settings are explained with comments in the file itself. An on-line version of the latest configuration file can be found here . This needs to have direct read access to the Dataverse database. It is recommended to use a dedicated PostGreSQL user for this with only SELECT permissions on the tables: builtinuser , apitoken and authenticateduser .","title":"Configuration"},{"location":"context/","text":"Context \u00b6 This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"context/#context","text":"This module is a component in the DANS Data Station Architecture .","title":"Context"},{"location":"dev/","text":"Development \u00b6 General information about developing DANS modules can be found here .","title":"Overview"},{"location":"dev/#development","text":"General information about developing DANS modules can be found here .","title":"Development"},{"location":"installation/","text":"Installation \u00b6 Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-dataverse-authenticator and the configuration files to /etc/opt/dans.knaw.nl/dd-dataverse-authenticator . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-dataverse-authenticator . Start the service with the following command /opt/dans.knaw.nl/dd-dataverse-authenticator/bin/dd-dataverse-authenticator server /opt/dans.knaw.nl/dd-dataverse-authenticator/cfg/config.yml Building from source \u00b6 Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-dataverse-authenticator.git cd dd-dataverse-authenticator mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Installation"},{"location":"installation/#installation","text":"Currently, this project is built as an RPM package for RHEL8 and later. The RPM will install the binaries to /opt/dans.knaw.nl/dd-dataverse-authenticator and the configuration files to /etc/opt/dans.knaw.nl/dd-dataverse-authenticator . For installation on systems that do no support RPM and/or systemd: Build the tarball (see next section). Extract it to some location on your system, for example /opt/dans.knaw.nl/dd-dataverse-authenticator . Start the service with the following command /opt/dans.knaw.nl/dd-dataverse-authenticator/bin/dd-dataverse-authenticator server /opt/dans.knaw.nl/dd-dataverse-authenticator/cfg/config.yml","title":"Installation"},{"location":"installation/#building-from-source","text":"Prerequisites: Java 17 or higher Maven 3.3.3 or higher RPM (optional, only if you want to build the RPM package) Steps: git clone https://github.com/DANS-KNAW/dd-dataverse-authenticator.git cd dd-dataverse-authenticator mvn clean install If the rpm executable is found at /usr/local/bin/rpm , the build profile that includes the RPM packaging will be activated. If rpm is available, but at a different path, then activate it by using Maven's -P switch: mvn -Pprm install . Alternatively, to build the tarball execute: mvn clean install assembly:single","title":"Building from source"}]}